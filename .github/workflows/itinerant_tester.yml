name: itinerant_tester
on:
  pull_request:
  push:
  #  branches: [master]
jobs:
  itinerant_tester:
    strategy:
      fail-fast: false
      matrix:
        repo:
          - aelol/quant
          - kornia/kornia
          - tmrowco/electricitymap-contrib
          - PettingZoo-Team/PettingZoo
          - unit8co/darts
          - benbusby/whoogle-search
          - Udyz/proxyshell-auto 
          #- RobotWebTools/rosbridge_suite
          #- ms-jpq/coq_nvim
          #- aws/serverless-application-model
          #- aristocratos/bpytop
          #- NVlabs/imaginaire
          #- DeepGraphLearning/torchdrug
          #- microsoft/recommenders
          #- G-Security-Team/GSLibrary
          #- nsidnev/fastapi-realworld-example-app
          #- samuelcolvin/pydantic
          #- readthedocs/readthedocs.org
          #- Rapptz/discord.py
          #- projectdiscovery/nuclei-templates
          #- platformio/platformio-core
          #- Z4nzu/hackingtool
          #- blakeblackshear/frigate
          #- Ciphey/Ciphey
          #- deepmind/alphafold
          #- DmytroLitvinov/awesome-flake8-extensions
          #- google/yapf
          #- mxrch/GHunt
          #- yogeshojha/rengine
          #- chriskiehl/Gooey
          #- wagtail/wagtail
          #- wxWidgets/Phoenix
          #- burnash/gspread
          #- dbt-labs/dbt
          #- mne-tools/mne-python
          #- akretion/nfelib
          #- akretion/generateds-odoo
          #- Vonng/ddia
          #- BYVoid/OpenCC
          #- elastic/detection-rules
          #- netbox-community/netbox
          #- isl-org/Open3D-ML
          #- openai/gym
          #- pantsbuild/pants
          #- asl2/PyZ3950
          #- openai/gym
          #- confluentinc/confluent-kafka-python
          #- dfirtrack/dfirtrack
          #- ucla-mobility/OpenCDA
          #- deepmind/alphafold
          #- deepmind/android_env
          #- deepmind/optax
          #- deepmind/acme
          #- deepmind/chex
          #- deepmind/meltingpot
          #- deepmind/launchpad
          #- deepmind/tree
          #- deepmind/enn
          #- deepmind/dm-haiku
          #- deepmind/distrax
          #- deepmind/dm_c19_modelling
          #- deepmind/jax_verify
          #- deepmind/jraph
          #- deepmind/sonnet
          #- deepmind/dm_pix
          #- deepmind/dqn_zoo
          #- deepmind/ferminet
          #- deepmind/dm_env
          #- deepmind/rlax
          #- deepmind/dmvr
          #- deepmind/learning-to-learn
          #- deepmind/dnc
          #- deepmind/bsuite
          #- deepmind/surface-distance
          #- deepmind/dm_control
          #- deepmind/tensor_annotations
          #- deepmind/jaxline
          #- deepmind/dm_env_rpc
          #- deepmind/jmp 
          #- nodejs/gyp-next
          #- nodejs/node-gyp
          #- mavlink/MAVSDK
          #- mavlink/MAVSDK-Proto
          #- mavlink/MAVSDK-Python
          #- mavlink/mavlink-devguide
          #- mavlink/mavlink.io
          #- sovrin-foundation/sovrin
          #- sovrin-foundation/community-tools
          #- sovrin-foundation/token-plugin
          #- sovrin-foundation/sovrin-sip  # from hyperledger/indy-hipe
          #- sovrin-foundation/steward-tools
          #- sovrin-foundation/aries-acapy-plugin-toolbox  # from hyperledger/aries-acapy-plugin-toolbox
          #- sovrin-foundation/aries-cloudagent-python  # from hyperledger/aries-cloudagent-python
          #- sovrin-foundation/training
          #- sovrin-foundation/sovrin-test-automation
          #- sovrin-foundation/indy-dev  # from michaeldboyd/indy-dev
          #- sovrin-foundation/sov-docs-conf
          #- PX4/px4_ros_com
          # - psf/black  # bandit goes into an infinite loop
          # - Azure/azure-sdk-for-python
          #- ArduPilot/pymavlink
          #- bee-san/pyWhat
          #- codespell-project/codespell
          #- ParthJadhav/Tkinter-Designer
          #- samuelcolvin/pydantic
          #- DataDog/dd-trace-py
          #- DataDog/datadogpy
          #- jd/tenacity
          #- sileht/cotyledon
          #- davidlatwe/montydb
          #- aaronbassett/FARM-starter
          #- artisan-roaster-scope/artisan
          #- jldbc/coffee-quality-database
          #- Q42/coffeehack
          #- Roastero/Openroast
          #- infarm/logicipi
          #- farmOS/farmOS.py
          #- farmOS/farmOS-aggregator
          #- applecreekacres/farm-terminal
          #- yamsamcham/ekisan_farmersportal.github.io
          #- farmerconnect/farmerconnect-ui
          #- jumpserver/jumpserver
          #- prompt-toolkit/python-prompt-toolkit
          #- hyperledger/aries-rfcs
          #- linkedin/greykite
          #- maurosoria/dirsearch
          #- HubSpot/hubspot-api-python
          #- burnash/gspread
          #- googleworkspace/PyDrive
          #- TadaSoftware/PyNFe
          #- akretion/nfelib
          #- njdreikosen/email_listener
          #- pallupz/covid-vaccine-booking
          #- micheles/decorator 
          #- pantsbuild/pants
          #- apache/incubator-nuttx
          #- Open-Book-Genome-Project/TheBestBookOn.com
          #- Open-Book-Genome-Project/sequencer 
          #- cyberwizard1001/Sem-4-code
          #- aman-raza/Friends_Hack
          #- dropbox/pyannotate
          #- facebookresearch/TransCoder
          #- cisagov/CHIRP
          #- cedadev/datamad2
          #- sass/libsass-python
          #- ReFirmLabs/binwalk
          #- ipython/ipython
          #-  nodejs/node
          #-  nodejs/node-gyp
          #-  nodejs/gyp-next
          # - wasm3/wasm3
          # - domoticz/domoticz
          #- joyent/javascriptlint
          #- joyent/smartos-live
          # - microsoft/debugpy
          #- osm-by/OpenStreetMap.by
          # - bpython/bpython
          # - Open-Book-Genome-Project/TheBestBookOn.com
          #- signalapp/Signal-Android
          #- signalapp/Signal-Desktop
          #- signalapp/Signal-iOS
          #- signalapp/Signal-Server
          #- google/sentencepiece
          #- bnewbold/fatcat-test-base:focal
          #- ubuntu/microk8s
          #- google/brotli
          #- facebookincubator/xar
          #- rytilahti/python-miio
          #- docker/docker-py
          #- internetarchive/fatcat-scholar
          #- internetarchive/infogami
          #- internetarchive/openlibrary
          #- internetarchive/openlibrary-client
          #- internetarchive/snakebite-py3
          #- internetarchive/wmd
          #- jjjake/internetarchive
          #- mapbox/node-pre-gyp
          #- gdamdam/iagitup
          #- gdamdam/saitan
          #- gdamdam/sumo
          #- gdamdam/rapni
          #- v8/v8
          #- httptoolkit/httptoolkit-server
          # - google/clusterfuzz
          # - google/oss-fuzz
          # - dependabot/dependabot-core
        python-version: [3.9]  # [2.7, 3.5, 3.6, 3.7, 3.8, pypy3]
    runs-on: ubuntu-latest
    steps:
      # - uses: actions/checkout@v2
      - run: git clone https://github.com/${{ matrix.repo }}
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - run: brew --version || true
      - run: pip install --upgrade pip wheel
      - run: pip install bandit black codespell flake8 flake8-bugbear
                         flake8-comprehensions flake8-return isort
                         mypy pytest pyupgrade safety
      - run: |
          bandit -r . > bandit.out.txt || true
          cat bandit.out.txt
      - shell: python
        run: |
          with open("bandit.out.txt") as in_file:
              errors = sorted(
                  set(line[11:15] for line in in_file if line.startswith(">> "))
              )
          print(f"bandit --recursive --skip {','.join(errors)} .")
      - run: rm bandit.out.txt
      - run: black --check . || true
      # - run: black --diff . || true
      # - if: matrix.python-version >= 3.6
      #  run: |
      #    pip install black
      #    black --check . || true
      - run: codespell --count --skip="*.po" || true  # --ignore-words-list="" --skip="*.po"
      - run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      - run: flake8 . --count --exit-zero --max-line-length=88 --show-source --statistics
      - run: isort --profile black . || true
      - run: pip install -r requirements.txt || pip install --editable . || true
      - run: mkdir -p .mypy_cache
      - run: mypy --ignore-missing-imports --install-types --non-interactive . || true
      - run: pytest . || pytest --doctest-modules . || true
      - run: shopt -s globstar && pyupgrade --py36-plus **/*.py || true
      - run: safety check
      - shell: python
        run: |
          from subprocess import run  # Requires Python >= 3.7
          from typing import Tuple

          flake8_out: Tuple[str] = tuple(run(
              ["flake8", "--ignore=AA", "--isolated", "--max-complexity=1", "."],
              capture_output=True,
              text=True
          ).stdout.splitlines())


          def get_max_complexity(flake8_out: Tuple[str] = flake8_out) -> int:
              C901_TAG = " is too complex ("
              c901_lines = [line for line in flake8_out if "C901" in line and C901_TAG in line]
              return max(int(line.split(C901_TAG)[-1].split(")")[0]) for line in c901_lines)


          def get_max_line_length(flake8_out: Tuple[str] = flake8_out) -> int:
              E501_TAG = ": E501 line too long ("
              e501_lines = [line for line in flake8_out if E501_TAG in line]
              return max(int(line.split(E501_TAG)[-1].split()[0]) for line in e501_lines)


          violations = set(line.split()[1] for line in flake8_out)

          try:
              violations.remove("C901")
              max_complexity = f"--max-complexity={max(get_max_complexity(), 10)} "
          except KeyError:
              max_complexity = ""

          try:
              violations.remove("E501")
              max_line_length = f"--max-line-length={max(get_max_line_length(), 88)} "
          except KeyError:
              max_line_length = ""

          ignore = f"--ignore={','.join(sorted(violations))} " if violations else ""
          flake8_cmd = (f"flake8 {ignore}{max_complexity}{max_line_length}--show-source --statistics .")
          print(flake8_cmd)
          print("=" * 80)
          run(flake8_cmd.split(), text=True)
      #- run: pip install flake8-bugbear flake8-comprehensions  # flake8-docstrings flake8-import-order flake8-polyfill flake8-return flake8-variables-names
      #- run: flake8 . --count --exit-zero --max-line-length=88 --show-source --statistics || true
